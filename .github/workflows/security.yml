name: Security & Dependencies

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: write
  checks: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '22.x'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install JS dependencies
      run: |
        cd js
        npm ci
        
    - name: Install Web dependencies
      run: |
        cd web
        npm ci
        
    - name: Audit JS packages
      run: |
        cd js
        npm run audit:all
        
    - name: Audit Web package
      run: |
        cd web
        npm audit --audit-level=moderate
        
    - name: Check outdated JS packages
      id: js-outdated
      run: |
        cd js
        echo "Checking JS package dependencies..."
        OUTDATED=$(npm run outdated:all 2>&1 || true)
        if [ -n "$OUTDATED" ] && [ "$OUTDATED" != "All packages are up to date" ] && [ "$OUTDATED" != "" ]; then
          echo "outdated=true" >> $GITHUB_OUTPUT
          echo "OUTDATED_JS<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTDATED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "outdated=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Check outdated Web packages
      id: web-outdated
      run: |
        cd web
        echo "Checking Web package dependencies..."
        OUTDATED=$(npm outdated 2>&1 || true)
        if [ -n "$OUTDATED" ] && [ "$OUTDATED" != "All packages are up to date" ] && [ "$OUTDATED" != "" ]; then
          echo "outdated=true" >> $GITHUB_OUTPUT
          echo "OUTDATED_WEB<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTDATED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "outdated=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Security Report
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Create security report
          let report = '# Security & Dependencies Report\n\n';
          report += `**Run Date:** ${new Date().toISOString()}\n`;
          report += `**Commit:** ${context.sha}\n`;
          report += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n\n`;
          
          // Add outdated dependencies section
          report += '## üì¶ Outdated Dependencies\n\n';
          
          const jsOutdated = '${{ steps.js-outdated.outputs.outdated }}' === 'true';
          const webOutdated = '${{ steps.web-outdated.outputs.outdated }}' === 'true';
          
          if (jsOutdated || webOutdated) {
            report += '‚ö†Ô∏è **WARNING: Outdated dependencies found!**\n\n';
            
            if (jsOutdated) {
              report += '### JS Packages (Monorepo)\n';
              report += '```\n${{ steps.js-outdated.outputs.OUTDATED_JS }}\n```\n\n';
            }
            
            if (webOutdated) {
              report += '### Web Package\n';
              report += '```\n${{ steps.web-outdated.outputs.OUTDATED_WEB }}\n```\n\n';
            }
            
            report += '**Action Required:** Update outdated dependencies to latest versions.\n\n';
          } else {
            report += '‚úÖ **All dependencies are up to date!**\n\n';
          }
          
          // Add security audit section
          report += '## üîí Security Audit\n\n';
          report += 'Security audit completed. Check the workflow logs for detailed results.\n\n';
          
          // Add recommendations
          report += '## üìã Recommendations\n\n';
          report += '- Review and update outdated dependencies regularly\n';
          report += '- Monitor security advisories for used packages\n';
          report += '- Use `npm audit fix` for automatic security fixes\n';
          report += '- Consider using Dependabot for automated dependency updates\n\n';
          
          // Write report to file
          fs.writeFileSync('security-report.md', report);
          
          console.log('Security report created successfully');
          
    - name: Upload Security Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: security-report.md
        retention-days: 30
        
    - name: Comment PR with Security Report
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('security-report.md')) {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Check if outdated dependencies were found
            const hasOutdated = '${{ steps.js-outdated.outputs.outdated }}' === 'true' || 
                               '${{ steps.web-outdated.outputs.outdated }}' === 'true';
            
            const comment = report + '\n\n---\n*This report was automatically generated by the Security & Dependencies workflow.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // Fail the workflow if outdated dependencies are found
            if (hasOutdated) {
              core.setFailed('Outdated dependencies found! Please update them before merging.');
            }
          }
          
    - name: Fail on Outdated Dependencies
      if: steps.js-outdated.outputs.outdated == 'true' || steps.web-outdated.outputs.outdated == 'true'
      run: |
        echo "‚ùå FAILURE: Outdated dependencies detected!"
        echo "Please update the following packages:"
        if [ "${{ steps.js-outdated.outputs.outdated }}" == "true" ]; then
          echo "JS Packages:"
          echo "${{ steps.js-outdated.outputs.OUTDATED_JS }}"
        fi
        if [ "${{ steps.web-outdated.outputs.outdated }}" == "true" ]; then
          echo "Web Packages:"
          echo "${{ steps.web-outdated.outputs.OUTDATED_WEB }}"
        fi
        exit 1

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC, Unlicense
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0, LGPL-2.0, LGPL-2.1, LGPL-3.0
        
  dependabot-check:
    name: Dependabot Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Dependabot Status
      uses: actions/github-script@v7
      with:
        script: |
          // Check if this PR is from Dependabot
          const isDependabot = context.actor === 'dependabot[bot]';
          
          if (isDependabot) {
            console.log('‚úÖ Dependabot PR detected');
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Check if PR title indicates security update
            const isSecurityUpdate = pr.title.toLowerCase().includes('security') || 
                                   pr.title.toLowerCase().includes('vulnerability') ||
                                   pr.title.toLowerCase().includes('cve');
            
            if (isSecurityUpdate) {
              console.log('üîí Security update detected - high priority');
              
              // Add security label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['security', 'dependencies', 'high-priority']
              });
              
              // Comment with security update info
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üîí **Security Update Detected**\n\nThis Dependabot PR addresses security vulnerabilities. Please review and merge promptly.\n\n**Priority:** High\n**Type:** Security Update\n**Auto-generated by:** Dependabot\n\nPlease test thoroughly before merging.`
              });
            } else {
              console.log('üì¶ Regular dependency update');
              
              // Add regular dependency label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['dependencies']
              });
            }
          } else {
            console.log('‚ÑπÔ∏è Regular PR - not from Dependabot');
          }