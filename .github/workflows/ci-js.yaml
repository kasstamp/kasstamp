name: CI - JS

on:
  push:
    branches: [main, develop]
    paths:
      - 'js/**'
      - 'web/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'js/**'
      - 'web/**'
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  CACHE_VERSION: 'v1'

jobs:
  # Lint and TypeScript checks
  lint-and-typecheck:
    name: JS Lint & TypeCheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install dependencies
        working-directory: js
        run: npm ci

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: js/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting with Prettier..."
          npm run format:check

      - name: Run ESLint
        working-directory: js
        run: npm run lint

      - name: Clean build cache
        working-directory: js
        run: npm run clean

      - name: TypeScript compilation check
        working-directory: js
        run: npm run build

  # Build all packages
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install dependencies
        working-directory: js
        run: npm ci

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: js/.turbo
          key: ${{ runner.os }}-turbo-${{ matrix.node-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ matrix.node-version }}-

      - name: Clean build cache
        working-directory: js
        run: npm run clean

      - name: Build all packages
        working-directory: js
        run: npm run build

      - name: Verify package exports
        working-directory: js
        run: |
          echo "Verifying package exports..."
          EXIT_CODE=0

          for package_dir in packages/*/; do
            package_name=$(basename "$package_dir")
            echo "Checking $package_name exports..."

            MISSING=""
            [ -f "${package_dir}dist/index.js" ] || MISSING="${MISSING} index.js"
            [ -f "${package_dir}dist/index.d.ts" ] || MISSING="${MISSING} index.d.ts"

            if [ -n "$MISSING" ]; then
              echo "‚ùå $package_name: Missing$MISSING"
              EXIT_CODE=1
            else
              echo "‚úÖ $package_name: All exports present"
            fi
          done

          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Some packages are missing required exports"
            exit 1
          fi

          echo ""
          echo "‚úÖ All packages have required exports!"

      - name: Check bundle sizes
        working-directory: js
        run: |
          echo "üì¶ Bundle size report:"
          echo "| Package | ESM |"
          echo "|---------|-----|"
          for package_dir in packages/*/; do
            package_name=$(basename "$package_dir")
            if [ -f "${package_dir}dist/index.js" ]; then
              esm_size=$(du -h "${package_dir}dist/index.js" | cut -f1)
              echo "| $package_name | $esm_size |"
            fi
          done

  # Test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install dependencies
        working-directory: js
        run: npm ci

      - name: Run tests with coverage
        working-directory: js
        run: |
          echo "üß™ Running tests on Node.js ${{ matrix.node-version }}"
          echo "Node.js version: $(node --version)"
          echo "Platform: $(node -e "console.log(process.platform)")"
          echo "WebCrypto available: $(node -e "console.log(!!globalThis.crypto?.subtle)")"

          # Run tests with coverage
          npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=text

      - name: Upload coverage to Codecov
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v3
        with:
          flags: javascript
          directory: js/coverage

  # Web Frontend testing
  web-frontend:
    name: Web Frontend
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            js/package-lock.json
            web/package-lock.json

      - name: Install SDK dependencies
        working-directory: js
        run: npm ci

      - name: Build SDK packages
        working-directory: js
        run: npm run build

      - name: Install web dependencies
        working-directory: web
        run: npm ci

      - name: Run ESLint
        working-directory: web
        run: npm run lint

      - name: Clean build cache
        working-directory: web
        run: npm run clean

      - name: TypeScript type check
        working-directory: web
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: web
        run: npm test

      - name: Build production bundle
        working-directory: web
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        working-directory: web
        run: |
          echo "üì¶ Web bundle size report:"
          if [ -d "dist" ]; then
            echo "Total dist size: $(du -sh dist | cut -f1)"
            echo ""
            echo "Assets breakdown:"
            find dist -type f -name "*.js" -o -name "*.css" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  $file: $size"
            done
          fi

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, test, web-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install dependencies
        working-directory: js
        run: npm ci

      - name: Build packages
        working-directory: js
        run: npm run build

      - name: Verify deployment readiness
        working-directory: js
        run: |
          echo "üöÄ Deployment readiness check:"
          echo "‚úÖ All tests passed"
          echo "‚úÖ All packages built successfully"
          echo "‚úÖ Browser compatibility verified via examples"
          echo "‚úÖ Code quality checks passed"
          echo "‚úÖ Web frontend built successfully"
          echo ""
          echo "üéâ JavaScript packages and web frontend are ready for deployment!"
