name: CI - JS

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  CACHE_VERSION: 'v1'

jobs:
  # 1. Runs global format check
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install root dependencies
        run: npm ci
      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting with Prettier..."
          npm run format:check

  # Lints, builds, and verifies all JS packages
  build-js:
    name: JS Lint, Build & Verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            js/package-lock.json

      - name: Install root dependencies
        run: npm ci

      - name: Install JS dependencies
        working-directory: js
        run: npm ci

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: js/.turbo
          key: ${{ runner.os }}-turbo-${{ env.CACHE_VERSION }}-${{ hashFiles('js/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ env.CACHE_VERSION }}-

      - name: Run ESLint
        working-directory: js
        run: npm run lint

      - name: Clean build cache
        working-directory: js
        run: npm run clean

      - name: Build all packages (includes TypeScript check)
        working-directory: js
        run: npm run build

      - name: Verify package exports
        working-directory: js
        run: |
          echo "Verifying package exports..."
          EXIT_CODE=0

          for package_dir in packages/*/; do
            package_name=$(basename "$package_dir")
            echo "Checking $package_name exports..."

            MISSING=""
            [ -f "${package_dir}dist/index.js" ] || MISSING="${MISSING} index.js"
            [ -f "${package_dir}dist/index.d.ts" ] || MISSING="${MISSING} index.d.ts"

            if [ -n "$MISSING" ]; then
              echo "‚ùå $package_name: Missing$MISSING"
              EXIT_CODE=1
            else
              echo "‚úÖ $package_name: All exports present"
            fi
          done

          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå Some packages are missing required exports"
            exit 1
          fi

          echo ""
          echo "‚úÖ All packages have required exports!"

      - name: Check bundle sizes
        working-directory: js
        run: |
          echo "üì¶ Bundle size report:"
          echo "| Package | ESM |"
          echo "|---------|-----|"
          for package_dir in packages/*/; do
            package_name=$(basename "$package_dir")
            if [ -f "${package_dir}dist/index.js" ]; then
              esm_size=$(du -h "${package_dir}dist/index.js" | cut -f1)
              echo "| $package_name | $esm_size |"
            fi
          done

  # Runs JS tests in parallel with build and format jobs
  test-js:
    name: JS Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install dependencies
        working-directory: js
        run: npm ci

      - name: Run tests with coverage
        working-directory: js
        run: |
          echo "üß™ Running tests on Node.js ${{ env.NODE_VERSION }}"
          npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=text

  # Builds and tests the web-frontend
  web-frontend:
    name: Web Frontend Build & Test
    runs-on: ubuntu-latest
    needs: [build-js]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            js/package-lock.json
            web/package-lock.json

      - name: Install SDK dependencies
        working-directory: js
        run: npm ci

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: js/.turbo
          key: ${{ runner.os }}-turbo-${{ env.CACHE_VERSION }}-${{ hashFiles('js/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ env.CACHE_VERSION }}-

      - name: Build SDK packages (will be instant from cache)
        working-directory: js
        run: |
          echo "Building JS packages... (expecting a full cache hit from Turborepo)"
          npm run build

      - name: Install web dependencies
        working-directory: web
        run: npm ci

      - name: Run ESLint
        working-directory: web
        run: npm run lint

      - name: TypeScript type check
        working-directory: web
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: web
        run: npm test

      - name: Build production bundle
        working-directory: web
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        working-directory: web
        run: |
          echo "üì¶ Web bundle size report:"
          if [ -d "dist" ]; then
            echo "Total dist size: $(du -sh dist | cut -f1)"
            echo ""
            echo "Assets breakdown:"
            find dist -type f -name "*.js" -o -name "*.css" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  $file: $size"
            done
          fi

  # The final quality gate
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [format-check, build-js, test-js, web-frontend]
    steps:
      - name: Verify deployment readiness
        run: |
          echo "üöÄ Deployment readiness check:"
          echo "‚úÖ Code formatting passed"
          echo "‚úÖ All tests passed"
          echo "‚úÖ All packages built successfully"
          echo "‚úÖ Web frontend built successfully"
          echo ""
          echo "üéâ JavaScript packages and web frontend are ready for deployment!"
