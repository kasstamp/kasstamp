/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/addresses/{kaspaAddress}/balance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Balance From Kaspa Address
     * @description Get balance for a given kaspa address
     */
    get: operations['get_balance_from_kaspa_address_addresses__kaspaAddress__balance_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/{kaspaAddress}/utxos': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Utxos For Address
     * @description Lists all open utxo for a given kaspa address
     */
    get: operations['get_utxos_for_address_addresses__kaspaAddress__utxos_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/utxos': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Utxos For Addresses
     * @description Lists all open utxo for a given kaspa address
     */
    post: operations['get_utxos_for_addresses_addresses_utxos_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/virtual-chain-blue-score': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Virtual Selected Parent Blue Score
     * @description Returns the blue score of the sink
     */
    get: operations['get_virtual_selected_parent_blue_score_info_virtual_chain_blue_score_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/blocks/{blockId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Block
     * @description Get block information for a given block id
     */
    get: operations['get_block_blocks__blockId__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/blocks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Blocks
     * @description Lists block beginning from a low hash (block id).
     */
    get: operations['get_blocks_blocks_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/blocks-from-bluescore': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Blocks From Bluescore
     * @description Lists blocks of a given blueScore
     */
    get: operations['get_blocks_from_bluescore_blocks_from_bluescore_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/network': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Network
     * @deprecated
     * @description Alias for /info/blockdag
     */
    get: operations['get_network_info_network_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/blockdag': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Blockdag
     * @description Get Kaspa BlockDAG information
     */
    get: operations['get_blockdag_info_blockdag_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/coinsupply': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Coinsupply
     * @description Get $KAS coin supply information
     */
    get: operations['get_coinsupply_info_coinsupply_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/coinsupply/circulating': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Circulating Coins
     * @description Get circulating amount of $KAS token as numerical value
     */
    get: operations['get_circulating_coins_info_coinsupply_circulating_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/coinsupply/total': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Total Coins
     * @description Get total amount of $KAS token as numerical value
     */
    get: operations['get_total_coins_info_coinsupply_total_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/kaspad': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Kaspad Info
     * @description Get some information for kaspad instance, which is currently connected.
     */
    get: operations['get_kaspad_info_info_kaspad_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/fee-estimate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Fee Estimate
     * @description Get fee estimate from Kaspad.
     *
     *     For all buckets, feerate values represent fee/mass of a transaction in `sompi/gram` units.<br>
     *     Given a feerate value recommendation, calculate the required fee by
     *     taking the transaction mass and multiplying it by feerate: `fee = feerate * mass(tx)`
     */
    get: operations['get_fee_estimate_info_fee_estimate_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/price': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Price
     * @description Returns the current price for Kaspa in USD.
     */
    get: operations['get_price_info_price_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Addresses Active
     * @description This endpoint checks if addresses have had any transaction activity in the past.
     *     It is specifically designed for HD Wallets to verify historical address activity.
     */
    post: operations['get_addresses_active_addresses_active_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/distribution': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * EXPERIMENTAL - EXPECT BREAKING CHANGES: Get Kaspa address distribution by balance tier
     * @description Get address distribution tiers, use 'before' to get historical data (must be divisible by limit).
     *
     *     Addresses are grouped by their balance (KAS) in powers of ten. Tier 0:[0.0001..1), 1:[1..10), ..., 10:[1b..10b).
     */
    get: operations['get_distribution_tiers_addresses_distribution_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/names': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Addresses Names
     * @description Get the name for an address
     */
    get: operations['get_addresses_names_addresses_names_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/{kaspaAddress}/name': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Name For Address
     * @description Get the name for an address
     */
    get: operations['get_name_for_address_addresses__kaspaAddress__name_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/top': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * EXPERIMENTAL - EXPECT BREAKING CHANGES: Get top Kaspa addresses (rich list)
     * @description Get top addresses, use 'before' to get historical data (must be divisible by limit).
     */
    get: operations['get_addresses_top_addresses_top_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions/{transactionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Transaction
     * @description Get details for a given transaction id
     */
    get: operations['get_transaction_transactions__transactionId__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Search For Transactions
     * @description Search for transactions by transaction_ids or blue_score
     */
    post: operations['search_for_transactions_transactions_search_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions/acceptance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Transaction Acceptance
     * @description Given a list of transaction_ids, return whether each one is accepted and the accepting blue score.
     */
    post: operations['get_transaction_acceptance_transactions_acceptance_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/{kaspaAddress}/full-transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Full Transactions For Address
     * @description Get all transactions for a given address from database.
     *     And then get their related full transaction data
     */
    get: operations['get_full_transactions_for_address_addresses__kaspaAddress__full_transactions_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/{kaspaAddress}/full-transactions-page': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Full Transactions For Address Page
     * @description Get all transactions for a given address from database.
     *     And then get their related full transaction data
     */
    get: operations['get_full_transactions_for_address_page_addresses__kaspaAddress__full_transactions_page_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/{kaspaAddress}/transactions-count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Transaction Count For Address
     * @description Count the number of transactions associated with this address
     */
    get: operations['get_transaction_count_for_address_addresses__kaspaAddress__transactions_count_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/addresses/balances': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Balances From Kaspa Addresses
     * @description Get balances for multiple kaspa addresses
     */
    post: operations['get_balances_from_kaspa_addresses_addresses_balances_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/blockreward': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Blockreward
     * @description Returns the current blockreward in KAS/block
     */
    get: operations['get_blockreward_info_blockreward_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/halving': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Halving
     * @description Returns information about chromatic halving
     */
    get: operations['get_halving_info_halving_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/hashrate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Hashrate
     * @description Returns the current hashrate for Kaspa network in TH/s.
     */
    get: operations['get_hashrate_info_hashrate_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/hashrate/max': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Max Hashrate
     * @description Returns the current hashrate for Kaspa network in TH/s.
     */
    get: operations['get_max_hashrate_info_hashrate_max_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/hashrate/history/{day}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Hashrate History For Day
     * @description Get hashrate history for a specific UTC day (YYYY-MM-DD)
     */
    get: operations['get_hashrate_history_for_day_info_hashrate_history__day__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/hashrate/history': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Hashrate History
     * @description Get historical hashrate samples with optional resolution (default = 1h)
     */
    get: operations['get_hashrate_history_info_hashrate_history_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health State
     * @description Checks node and database health by comparing blue score and sync status.
     *     Returns health details or 503 if the database lags by ~10min or no nodes are synced.
     */
    get: operations['health_state_info_health_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/info/marketcap': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Marketcap
     * @description Get $KAS price and market cap. Price info is from coingecko.com
     */
    get: operations['get_marketcap_info_marketcap_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Submit A New Transaction */
    post: operations['submit_a_new_transaction_transactions_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions/mass': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Calculate Transaction Mass
     * @description This function calculates and returns the mass of a transaction, which is essential for determining the minimum fee. The mass calculation takes into account the storage mass as defined in KIP-0009.
     *
     *     Note: Be aware that if the transaction has a very low output amount or a high number of outputs, the mass can become significantly large.
     */
    post: operations['calculate_transaction_mass_transactions_mass_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/virtual-chain': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** EXPERIMENTAL - EXPECT BREAKING CHANGES: Get virtual chain transactions by blue score */
    get: operations['get_virtual_chain_transactions_virtual_chain_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AcceptanceMode
     * @description An enumeration.
     * @enum {string}
     */
    AcceptanceMode: 'accepted' | 'rejected';
    /** AddressName */
    AddressName: {
      /** Address */
      address: string;
      /** Name */
      name: string;
    };
    /** AddressesActiveRequest */
    AddressesActiveRequest: {
      /**
       * Addresses
       * @default [
       *       "kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73"
       *     ]
       */
      addresses: string[];
    };
    /** AddressesActiveResponse */
    AddressesActiveResponse: {
      /**
       * Address
       * @example kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73
       */
      address: string;
      /**
       * Active
       * @example true
       */
      active: boolean;
      /**
       * Lasttxblocktime
       * @example 1752924174352
       */
      lastTxBlockTime?: number;
    };
    /** BalanceRequest */
    BalanceRequest: {
      /**
       * Addresses
       * @default [
       *       "kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73"
       *     ]
       */
      addresses: string[];
    };
    /** BalanceResponse */
    BalanceResponse: {
      /**
       * Address
       * @default kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73
       */
      address: string;
      /**
       * Balance
       * @default 38240000000
       */
      balance: number;
    };
    /** BalancesByAddressEntry */
    BalancesByAddressEntry: {
      /**
       * Address
       * @default kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73
       */
      address: string;
      /**
       * Balance
       * @default 12451591699
       */
      balance: number;
    };
    /** BlockModel */
    BlockModel: {
      header: components['schemas']['endpoints__get_blocks__BlockHeader'];
      /** Transactions */
      transactions?: components['schemas']['BlockTxModel'][];
      verboseData: components['schemas']['VerboseDataModel'];
      extra?: components['schemas']['ExtraModel'];
    };
    /** BlockResponse */
    BlockResponse: {
      /**
       * Blockhashes
       * @default [
       *       "44edf9bfd32aa154bfad64485882f184372b64bd60565ba121b42fc3cb1238f3",
       *       "18c7afdf8f447ca06adb8b4946dc45f5feb1188c7d177da6094dfbc760eca699",
       *       "9a822351cd293a653f6721afec1646bd1690da7124b5fbe87001711406010604",
       *       "2fda0dad4ec879b4ad02ebb68c757955cab305558998129a7de111ab852e7dcb"
       *     ]
       */
      blockHashes: string[];
      /** Blocks */
      blocks?: components['schemas']['BlockModel'][];
    };
    /** BlockRewardResponse */
    BlockRewardResponse: {
      /**
       * Blockreward
       * @default 12000132
       */
      blockreward: number;
    };
    /** BlockTxInputModel */
    BlockTxInputModel: {
      previousOutpoint?: components['schemas']['BlockTxInputPreviousOutpointModel'];
      /** Signaturescript */
      signatureScript?: string;
      /** Sigopcount */
      sigOpCount?: number;
      /** Sequence */
      sequence?: number;
    };
    /** BlockTxInputPreviousOutpointModel */
    BlockTxInputPreviousOutpointModel: {
      /** Transactionid */
      transactionId: string;
      /** Index */
      index: number;
    };
    /** BlockTxModel */
    BlockTxModel: {
      /** Inputs */
      inputs?: components['schemas']['BlockTxInputModel'][];
      /** Outputs */
      outputs?: components['schemas']['BlockTxOutputModel'][];
      /** Subnetworkid */
      subnetworkId?: string;
      /** Payload */
      payload?: string;
      verboseData: components['schemas']['BlockTxVerboseDataModel'];
      /** Locktime */
      lockTime?: number;
      /** Gas */
      gas?: number;
      /** Mass */
      mass?: number;
      /** Version */
      version?: number;
    };
    /** BlockTxOutputModel */
    BlockTxOutputModel: {
      /** Amount */
      amount?: number;
      scriptPublicKey?: components['schemas']['BlockTxOutputScriptPublicKeyModel'];
      verboseData?: components['schemas']['BlockTxOutputVerboseDataModel'];
    };
    /** BlockTxOutputScriptPublicKeyModel */
    BlockTxOutputScriptPublicKeyModel: {
      /** Scriptpublickey */
      scriptPublicKey?: string;
      /** Version */
      version?: number;
    };
    /** BlockTxOutputVerboseDataModel */
    BlockTxOutputVerboseDataModel: {
      /** Scriptpublickeytype */
      scriptPublicKeyType?: string;
      /** Scriptpublickeyaddress */
      scriptPublicKeyAddress?: string;
    };
    /** BlockTxVerboseDataModel */
    BlockTxVerboseDataModel: {
      /** Transactionid */
      transactionId: string;
      /** Hash */
      hash?: string;
      /** Computemass */
      computeMass?: number;
      /** Blockhash */
      blockHash?: string;
      /** Blocktime */
      blockTime?: number;
    };
    /** BlockdagResponse */
    BlockdagResponse: {
      /**
       * Networkname
       * @example kaspa-mainnet
       */
      networkName: string;
      /**
       * Blockcount
       * @example 260890
       */
      blockCount: string;
      /**
       * Headercount
       * @example 2131312
       */
      headerCount: string;
      /**
       * Tiphashes
       * @example [
       *       "78273854a739e3e379dfd34a262bbe922400d8e360e30e3f31228519a334350a"
       *     ]
       */
      tipHashes: string[];
      /**
       * Difficulty
       * @example 3870677677777.2
       */
      difficulty: number;
      /**
       * Pastmediantime
       * @example 1656455670700
       */
      pastMedianTime: string;
      /**
       * Virtualparenthashes
       * @example [
       *       "78273854a739e3e379dfd34a262bbe922400d8e360e30e3f31228519a334350a"
       *     ]
       */
      virtualParentHashes: string[];
      /**
       * Pruningpointhash
       * @example 5d32a9403273a34b6551b84340a1459ddde2ae6ba59a47987a6374340ba41d5d
       */
      pruningPointHash: string;
      /**
       * Virtualdaascore
       * @example 19989141
       */
      virtualDaaScore: string;
      /**
       * Sink
       * @example 366b1cf51146cc002672b79948634751a2914a2cc9e273afe358bdc1ae19dce9
       */
      sink: string;
    };
    /** BlueScoreResponse */
    BlueScoreResponse: {
      /**
       * Bluescore
       * @default 260890
       */
      blueScore: number;
    };
    /** CoinSupplyResponse */
    CoinSupplyResponse: {
      /**
       * Circulatingsupply
       * @default 1000900697580640180
       */
      circulatingSupply: string;
      /**
       * Maxsupply
       * @default 2900000000000000000
       */
      maxSupply: string;
    };
    /** DBCheckStatus */
    DBCheckStatus: {
      /**
       * Issynced
       * @default true
       */
      isSynced: boolean;
      /** Bluescore */
      blueScore?: number;
      /** Bluescorediff */
      blueScoreDiff?: number;
      /** Acceptedtxblocktime */
      acceptedTxBlockTime?: number;
      /** Acceptedtxblocktimediff */
      acceptedTxBlockTimeDiff?: number;
    };
    /** DistributionTier */
    DistributionTier: {
      /** Tier */
      tier: number;
      /** Count */
      count: number;
      /** Amount */
      amount: number;
    };
    /** DistributionTiers */
    DistributionTiers: {
      /** Timestamp */
      timestamp: number;
      /** Tiers */
      tiers: components['schemas']['DistributionTier'][];
    };
    /** ExtraModel */
    ExtraModel: {
      /** Color */
      color?: string;
      /** Mineraddress */
      minerAddress?: string;
      /** Minerinfo */
      minerInfo?: string;
    };
    /** FeeEstimateBucket */
    FeeEstimateBucket: {
      /**
       * Feerate
       * @default 1
       */
      feerate: number;
      /**
       * Estimatedseconds
       * @default 0.004
       */
      estimatedSeconds: number;
    };
    /** FeeEstimateResponse */
    FeeEstimateResponse: {
      priorityBucket: components['schemas']['FeeEstimateBucket'];
      /** Normalbuckets */
      normalBuckets: components['schemas']['FeeEstimateBucket'][];
      /** Lowbuckets */
      lowBuckets: components['schemas']['FeeEstimateBucket'][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** HalvingResponse */
    HalvingResponse: {
      /**
       * Nexthalvingtimestamp
       * @default 1662837270000
       */
      nextHalvingTimestamp: number;
      /**
       * Nexthalvingdate
       * @default 2022-09-10 19:38:52 UTC
       */
      nextHalvingDate: string;
      /**
       * Nexthalvingamount
       * @default 155.123123
       */
      nextHalvingAmount: number;
    };
    /** HashrateHistoryResponse */
    HashrateHistoryResponse: {
      /** Daascore */
      daaScore: number;
      /** Bluescore */
      blueScore: number;
      /** Timestamp */
      timestamp: number;
      /** Date Time */
      date_time: string;
      /** Bits */
      bits?: number;
      /** Difficulty */
      difficulty: number;
      /** Hashrate Kh */
      hashrate_kh: number;
    };
    /** HashrateResponse */
    HashrateResponse: {
      /**
       * Hashrate
       * @default 12000132
       */
      hashrate: number;
    };
    /** HealthResponse */
    HealthResponse: {
      /** Kaspadservers */
      kaspadServers: components['schemas']['KaspadResponse'][];
      database: components['schemas']['DBCheckStatus'];
    };
    /** KaspadInfoResponse */
    KaspadInfoResponse: {
      /**
       * Mempoolsize
       * @default 1
       */
      mempoolSize: string;
      /**
       * Serverversion
       * @default 0.12.2
       */
      serverVersion: string;
      /**
       * Isutxoindexed
       * @default true
       */
      isUtxoIndexed: boolean;
      /**
       * Issynced
       * @default true
       */
      isSynced: boolean;
      /**
       * P2Pidhashed
       * @default 36a17cd8644eef34fc7fe4719655e06dbdf117008900c46975e66c35acd09b01
       */
      p2pIdHashed: string;
    };
    /** KaspadResponse */
    KaspadResponse: {
      /** Kaspadhost */
      kaspadHost?: string;
      /**
       * Serverversion
       * @default 0.12.6
       */
      serverVersion: string;
      /**
       * Isutxoindexed
       * @default true
       */
      isUtxoIndexed: boolean;
      /**
       * Issynced
       * @default true
       */
      isSynced: boolean;
      /**
       * P2Pid
       * @default 1231312
       */
      p2pId: string;
      /**
       * Bluescore
       * @default 0
       */
      blueScore: number;
    };
    /** MarketCapResponse */
    MarketCapResponse: {
      /**
       * Marketcap
       * @default 12000132
       */
      marketcap: number;
    };
    /** MaxHashrateResponse */
    MaxHashrateResponse: {
      /**
       * Hashrate
       * @default 12000132
       */
      hashrate: number;
      blockheader: components['schemas']['endpoints__get_hashrate__BlockHeader'];
    };
    /** OutpointModel */
    OutpointModel: {
      /**
       * Transactionid
       * @default ef62efbc2825d3ef9ec1cf9b80506876ac077b64b11a39c8ef5e028415444dc9
       */
      transactionId: string;
      /**
       * Index
       * @default 0
       */
      index: number;
    };
    /** ParentHashModel */
    ParentHashModel: {
      /**
       * Parenthashes
       * @default [
       *       "580f65c8da9d436480817f6bd7c13eecd9223b37f0d34ae42fb17e1e9fda397e"
       *     ]
       */
      parentHashes: string[];
    };
    /**
     * PreviousOutpointLookupMode
     * @description An enumeration.
     * @enum {string}
     */
    PreviousOutpointLookupMode: 'no' | 'light' | 'full';
    /** PriceResponse */
    PriceResponse: {
      /**
       * Price
       * @default 0.025235
       */
      price: number;
    };
    /** ScriptPublicKeyModel */
    ScriptPublicKeyModel: {
      /**
       * Scriptpublickey
       * @default 20c5629ce85f6618cd3ed1ac1c99dc6d3064ed244013555c51385d9efab0d0072fac
       */
      scriptPublicKey: string;
    };
    /** SubmitTransactionRequest */
    SubmitTransactionRequest: {
      transaction: components['schemas']['SubmitTxModel'];
      /**
       * Alloworphan
       * @default false
       */
      allowOrphan: boolean;
    };
    /** SubmitTransactionResponse */
    SubmitTransactionResponse: {
      /** Transactionid */
      transactionId?: string;
      /** Error */
      error?: string;
    };
    /** SubmitTxInput */
    SubmitTxInput: {
      previousOutpoint: components['schemas']['SubmitTxOutpoint'];
      /** Signaturescript */
      signatureScript: string;
      /** Sequence */
      sequence: number;
      /** Sigopcount */
      sigOpCount: number;
    };
    /** SubmitTxModel */
    SubmitTxModel: {
      /** Version */
      version: number;
      /** Inputs */
      inputs: components['schemas']['SubmitTxInput'][];
      /** Outputs */
      outputs: components['schemas']['SubmitTxOutput'][];
      /**
       * Locktime
       * @default 0
       */
      lockTime: number;
      /** Subnetworkid */
      subnetworkId?: string;
    };
    /** SubmitTxOutpoint */
    SubmitTxOutpoint: {
      /** Transactionid */
      transactionId: string;
      /** Index */
      index: number;
    };
    /** SubmitTxOutput */
    SubmitTxOutput: {
      /** Amount */
      amount: number;
      scriptPublicKey: components['schemas']['SubmitTxScriptPublicKey'];
    };
    /** SubmitTxScriptPublicKey */
    SubmitTxScriptPublicKey: {
      /** Version */
      version: number;
      /** Scriptpublickey */
      scriptPublicKey: string;
    };
    /** TopAddress */
    TopAddress: {
      /** Rank */
      rank: number;
      /** Address */
      address: string;
      /** Amount */
      amount: number;
    };
    /** TopAddresses */
    TopAddresses: {
      /** Timestamp */
      timestamp: number;
      /** Ranking */
      ranking: components['schemas']['TopAddress'][];
    };
    /** TransactionCount */
    TransactionCount: {
      /** Total */
      total: number;
    };
    /** TxAcceptanceRequest */
    TxAcceptanceRequest: {
      /**
       * Transactionids
       * @example [
       *       "b9382bdee4aa364acf73eda93914eaae61d0e78334d1b8a637ab89ef5e224e41",
       *       "1e098b3830c994beb28768f7924a38286cec16e85e9757e0dc3574b85f624c34",
       *       "000ad5138a603aadc25cfcca6b6605d5ff47d8c7be594c9cdd199afa6dc76ac6"
       *     ]
       */
      transactionIds: string[];
    };
    /** TxAcceptanceResponse */
    TxAcceptanceResponse: {
      /**
       * Transactionid
       * @default b9382bdee4aa364acf73eda93914eaae61d0e78334d1b8a637ab89ef5e224e41
       */
      transactionId: string;
      /** Accepted */
      accepted: boolean;
      /** Acceptingbluescore */
      acceptingBlueScore?: number;
    };
    /** TxInput */
    TxInput: {
      /** Transaction Id */
      transaction_id: string;
      /** Index */
      index: number;
      /** Previous Outpoint Hash */
      previous_outpoint_hash: string;
      /** Previous Outpoint Index */
      previous_outpoint_index: string;
      previous_outpoint_resolved?: components['schemas']['TxOutput'];
      /** Previous Outpoint Address */
      previous_outpoint_address?: string;
      /** Previous Outpoint Amount */
      previous_outpoint_amount?: number;
      /** Signature Script */
      signature_script?: string;
      /** Sig Op Count */
      sig_op_count?: string;
    };
    /** TxMass */
    TxMass: {
      /** Mass */
      mass: number;
      /** Storage Mass */
      storage_mass: number;
      /** Compute Mass */
      compute_mass: number;
    };
    /** TxModel */
    TxModel: {
      /** Subnetwork Id */
      subnetwork_id?: string;
      /** Transaction Id */
      transaction_id?: string;
      /** Hash */
      hash?: string;
      /** Mass */
      mass?: string;
      /** Payload */
      payload?: string;
      /** Block Hash */
      block_hash?: string[];
      /** Block Time */
      block_time?: number;
      /** Is Accepted */
      is_accepted?: boolean;
      /** Accepting Block Hash */
      accepting_block_hash?: string;
      /** Accepting Block Blue Score */
      accepting_block_blue_score?: number;
      /** Accepting Block Time */
      accepting_block_time?: number;
      /** Inputs */
      inputs?: components['schemas']['TxInput'][];
      /** Outputs */
      outputs?: components['schemas']['TxOutput'][];
    };
    /** TxOutput */
    TxOutput: {
      /** Transaction Id */
      transaction_id: string;
      /** Index */
      index: number;
      /** Amount */
      amount: number;
      /** Script Public Key */
      script_public_key?: string;
      /** Script Public Key Address */
      script_public_key_address?: string;
      /** Script Public Key Type */
      script_public_key_type?: string;
      /** Accepting Block Hash */
      accepting_block_hash?: string;
    };
    /** TxSearch */
    TxSearch: {
      /** Transactionids */
      transactionIds?: string[];
      acceptingBlueScores?: components['schemas']['TxSearchAcceptingBlueScores'];
    };
    /** TxSearchAcceptingBlueScores */
    TxSearchAcceptingBlueScores: {
      /** Gte */
      gte: number;
      /** Lt */
      lt: number;
    };
    /** UtxoModel */
    UtxoModel: {
      /**
       * Amount
       * @default [
       *       "11501593788"
       *     ]
       */
      amount: string;
      scriptPublicKey: components['schemas']['ScriptPublicKeyModel'];
      /**
       * Blockdaascore
       * @default 18867232
       */
      blockDaaScore: string;
      /**
       * Iscoinbase
       * @default false
       */
      isCoinbase: boolean;
    };
    /** UtxoRequest */
    UtxoRequest: {
      /**
       * Addresses
       * @default [
       *       "kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73"
       *     ]
       */
      addresses: string[];
    };
    /** UtxoResponse */
    UtxoResponse: {
      /**
       * Address
       * @default kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73
       */
      address: string;
      outpoint: components['schemas']['OutpointModel'];
      utxoEntry: components['schemas']['UtxoModel'];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VcBlockModel */
    VcBlockModel: {
      /** Hash */
      hash: string;
      /** Blue Score */
      blue_score: number;
      /** Daa Score */
      daa_score?: number;
      /** Timestamp */
      timestamp?: number;
      /** Transactions */
      transactions?: components['schemas']['VcTxModel'][];
    };
    /** VcTxInput */
    VcTxInput: {
      /** Previous Outpoint Hash */
      previous_outpoint_hash: string;
      /** Previous Outpoint Index */
      previous_outpoint_index: number;
      /** Previous Outpoint Script */
      previous_outpoint_script?: string;
      /** Previous Outpoint Address */
      previous_outpoint_address?: string;
      /** Previous Outpoint Amount */
      previous_outpoint_amount?: number;
    };
    /** VcTxModel */
    VcTxModel: {
      /** Transaction Id */
      transaction_id: string;
      /**
       * Is Accepted
       * @default true
       */
      is_accepted: boolean;
      /** Inputs */
      inputs?: components['schemas']['VcTxInput'][];
      /** Outputs */
      outputs?: components['schemas']['VcTxOutput'][];
    };
    /** VcTxOutput */
    VcTxOutput: {
      /** Script Public Key */
      script_public_key: string;
      /** Script Public Key Address */
      script_public_key_address: string;
      /** Amount */
      amount: number;
    };
    /** VerboseDataModel */
    VerboseDataModel: {
      /**
       * Hash
       * @default 18c7afdf8f447ca06adb8b4946dc45f5feb1188c7d177da6094dfbc760eca699
       */
      hash: string;
      /**
       * Difficulty
       * @default [
       *       4102204523252.94
       *     ]
       */
      difficulty: number;
      /**
       * Selectedparenthash
       * @default 580f65c8da9d436480817f6bd7c13eecd9223b37f0d34ae42fb17e1e9fda397e
       */
      selectedParentHash: string;
      /**
       * Transactionids
       * @default [
       *       "533f8314bf772259fe517f53507a79ebe61c8c6a11748d93a0835551233b3311"
       *     ]
       */
      transactionIds: string[];
      /**
       * Bluescore
       * @default 18483232
       */
      blueScore: string;
      /** Childrenhashes */
      childrenHashes?: string[];
      /**
       * Mergesetblueshashes
       * @default []
       */
      mergeSetBluesHashes: string[];
      /**
       * Mergesetredshashes
       * @default []
       */
      mergeSetRedsHashes: string[];
      /**
       * Ischainblock
       * @default false
       */
      isChainBlock: boolean;
    };
    /** BlockHeader */
    endpoints__get_blocks__BlockHeader: {
      /**
       * Version
       * @default 1
       */
      version: number;
      /**
       * Hashmerkleroot
       * @default e6641454e16cff4f232b899564eeaa6e480b66069d87bee6a2b2476e63fcd887
       */
      hashMerkleRoot: string;
      /**
       * Acceptedidmerkleroot
       * @default 9bab45b027a0b2b47135b6f6f866e5e4040fc1fdf2fe56eb0c90a603ce86092b
       */
      acceptedIdMerkleRoot: string;
      /**
       * Utxocommitment
       * @default 236d5f9ffd19b317a97693322c3e2ae11a44b5df803d71f1ccf6c2393bc6143c
       */
      utxoCommitment: string;
      /**
       * Timestamp
       * @default 1656450648874
       */
      timestamp: string;
      /**
       * Bits
       * @default 455233226
       */
      bits: number;
      /**
       * Nonce
       * @default 14797571275553019490
       */
      nonce: string;
      /**
       * Daascore
       * @default 19984482
       */
      daaScore: string;
      /**
       * Bluework
       * @default 2d1b3f04f8a0dcd31
       */
      blueWork: string;
      /** Parents */
      parents?: components['schemas']['ParentHashModel'][];
      /**
       * Bluescore
       * @default 18483232
       */
      blueScore: string;
      /**
       * Pruningpoint
       * @default 5d32a9403273a34b6551b84340a1459ddde2ae6ba59a47987a6374340ba41d5d
       */
      pruningPoint: string;
    };
    /** BlockHeader */
    endpoints__get_hashrate__BlockHeader: {
      /**
       * Hash
       * @default e6641454e16cff4f232b899564eeaa6e480b66069d87bee6a2b2476e63fcd887
       */
      hash: string;
      /**
       * Timestamp
       * @default 1656450648874
       */
      timestamp: string;
      /**
       * Difficulty
       * @default 1212312312
       */
      difficulty: number;
      /**
       * Daascore
       * @default 19984482
       */
      daaScore: string;
      /**
       * Bluescore
       * @default 18483232
       */
      blueScore: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_balance_from_kaspa_address_addresses__kaspaAddress__balance_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73 */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BalanceResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_utxos_for_address_addresses__kaspaAddress__utxos_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73 */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UtxoResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_utxos_for_addresses_addresses_utxos_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UtxoRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UtxoResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_virtual_selected_parent_blue_score_info_virtual_chain_blue_score_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlueScoreResponse'];
        };
      };
    };
  };
  get_block_blocks__blockId__get: {
    parameters: {
      query?: {
        includeTransactions?: boolean;
        includeColor?: boolean;
      };
      header?: never;
      path: {
        blockId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_blocks_blocks_get: {
    parameters: {
      query: {
        lowHash: string;
        includeBlocks?: boolean;
        includeTransactions?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_blocks_from_bluescore_blocks_from_bluescore_get: {
    parameters: {
      query?: {
        blueScore?: number;
        includeTransactions?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_network_info_network_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockdagResponse'];
        };
      };
    };
  };
  get_blockdag_info_blockdag_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockdagResponse'];
        };
      };
    };
  };
  get_coinsupply_info_coinsupply_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CoinSupplyResponse'];
        };
      };
    };
  };
  get_circulating_coins_info_coinsupply_circulating_get: {
    parameters: {
      query?: {
        in_billion?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_total_coins_info_coinsupply_total_get: {
    parameters: {
      query?: {
        in_billion?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_kaspad_info_info_kaspad_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['KaspadInfoResponse'];
        };
      };
    };
  };
  get_fee_estimate_info_fee_estimate_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FeeEstimateResponse'];
        };
      };
    };
  };
  get_price_info_price_get: {
    parameters: {
      query?: {
        stringOnly?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PriceResponse'] | string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_addresses_active_addresses_active_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddressesActiveRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AddressesActiveResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_distribution_tiers_addresses_distribution_get: {
    parameters: {
      query?: {
        before?: number;
        limit?: 1 | 24;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DistributionTiers'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_addresses_names_addresses_names_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AddressName'][];
        };
      };
    };
  };
  get_name_for_address_addresses__kaspaAddress__name_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkx9awp4e */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AddressName'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_addresses_top_addresses_top_get: {
    parameters: {
      query?: {
        before?: number;
        limit?: 1;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TopAddresses'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_transaction_transactions__transactionId__get: {
    parameters: {
      query?: {
        /** @description Specify a containing block (if known) for faster lookup */
        blockHash?: string;
        inputs?: boolean;
        outputs?: boolean;
        /** @description Use this parameter if you want to fetch the TransactionInput previous outpoint details. Light fetches only the address and amount. Full fetches the whole TransactionOutput and adds it into each TxInput. */
        resolve_previous_outpoints?: components['schemas']['PreviousOutpointLookupMode'];
      };
      header?: never;
      path: {
        transactionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  search_for_transactions_transactions_search_post: {
    parameters: {
      query?: {
        fields?: string;
        /** @description Use this parameter if you want to fetch the TransactionInput previous outpoint details. Light fetches only the address and amount. Full fetches the whole TransactionOutput and adds it into each TxInput. */
        resolve_previous_outpoints?: components['schemas']['PreviousOutpointLookupMode'];
        /** @description Only used when searching using transactionIds */
        acceptance?: components['schemas']['AcceptanceMode'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TxSearch'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_transaction_acceptance_transactions_acceptance_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TxAcceptanceRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxAcceptanceResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_full_transactions_for_address_addresses__kaspaAddress__full_transactions_get: {
    parameters: {
      query?: {
        /** @description The number of records to get */
        limit?: number;
        /** @description The offset from which to get records */
        offset?: number;
        fields?: string;
        /** @description Use this parameter if you want to fetch the TransactionInput previous outpoint details. Light fetches only the adress and amount. Full fetches the whole TransactionOutput and adds it into each TxInput. */
        resolve_previous_outpoints?: components['schemas']['PreviousOutpointLookupMode'];
      };
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73 */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_full_transactions_for_address_page_addresses__kaspaAddress__full_transactions_page_get: {
    parameters: {
      query?: {
        /** @description The max number of records to get. For paging combine with using 'before/after' from oldest previous result. Use value of X-Next-Page-Before/-After as long as header is present to continue paging. The actual number of transactions returned for each page can be > limit. */
        limit?: number;
        /** @description Only include transactions with block time before this (epoch-millis) */
        before?: number;
        /** @description Only include transactions with block time after this (epoch-millis) */
        after?: number;
        fields?: string;
        /** @description Use this parameter if you want to fetch the TransactionInput previous outpoint details. Light fetches only the adress and amount. Full fetches the whole TransactionOutput and adds it into each TxInput. */
        resolve_previous_outpoints?: components['schemas']['PreviousOutpointLookupMode'];
        acceptance?: components['schemas']['AcceptanceMode'];
      };
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73 */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_transaction_count_for_address_addresses__kaspaAddress__transactions_count_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Kaspa address as string e.g. kaspa:qqkqkzjvr7zwxxmjxjkmxxdwju9kjs6e9u82uh59z07vgaks6gg62v8707g73 */
        kaspaAddress: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TransactionCount'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_balances_from_kaspa_addresses_addresses_balances_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BalanceRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BalancesByAddressEntry'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_blockreward_info_blockreward_get: {
    parameters: {
      query?: {
        stringOnly?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BlockRewardResponse'] | string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_halving_info_halving_get: {
    parameters: {
      query?: {
        field?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HalvingResponse'] | string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_hashrate_info_hashrate_get: {
    parameters: {
      query?: {
        stringOnly?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HashrateResponse'] | string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_max_hashrate_info_hashrate_max_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MaxHashrateResponse'];
        };
      };
    };
  };
  get_hashrate_history_for_day_info_hashrate_history__day__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        day: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HashrateHistoryResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_hashrate_history_info_hashrate_history_get: {
    parameters: {
      query?: {
        resolution?: '15m' | '1h' | '3h' | '1d' | '7d';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HashrateHistoryResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  health_state_info_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HealthResponse'];
        };
      };
    };
  };
  get_marketcap_info_marketcap_get: {
    parameters: {
      query?: {
        stringOnly?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MarketCapResponse'] | string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  submit_a_new_transaction_transactions_post: {
    parameters: {
      query?: {
        /** @description Replace an existing transaction in the mempool */
        replaceByFee?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitTransactionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubmitTransactionResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SubmitTransactionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  calculate_transaction_mass_transactions_mass_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitTxModel'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TxMass'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_virtual_chain_transactions_virtual_chain_get: {
    parameters: {
      query: {
        /**
         * @description Divisible by limit
         * @example 106329050
         */
        blueScoreGte: number;
        limit?: 10 | 100;
        resolveInputs?: boolean;
        includeCoinbase?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VcBlockModel'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
